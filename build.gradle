plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("io.papermc.paperweight.userdev") version "2.0.0-beta.16"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

group = "com.iantapply"
version = "1.3.1"

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/IanTapply22/Wynncraft")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT"
    implementation "net.kyori:adventure-api:4.19.0"

    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

    paperweight.paperDevBundle("1.21.4-R0.1-SNAPSHOT")
    implementation 'xyz.jpenilla:reflection-remapper:0.1.1'

    implementation 'org.postgresql:postgresql:42.7.5'
    implementation 'org.incendo:cloud-paper:2.0.0-beta.10'

    implementation "com.influxdb:influxdb-client-java:7.2.0"
}

tasks {
    runServer {
        minecraftVersion("1.21.4")
    }
    shadowJar {
        // Helper method to relocate a package into our package namespace
        def reloc = { pkg ->
            relocate(pkg, "com.iantapply.wynncraft.dependency.${pkg}")
        }

        // Relocate cloud and its transitive dependencies
        reloc("org.incendo.cloud")
        reloc("io.leangen.geantyref")
    }
}

tasks.named('shadowJar') {
    archiveClassifier.set('')
}

tasks.named('build') {
    dependsOn(tasks.named('shadowJar'))
}

def targetJavaVersion = 21

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}